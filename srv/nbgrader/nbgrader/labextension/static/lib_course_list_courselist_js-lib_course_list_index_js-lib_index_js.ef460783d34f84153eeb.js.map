{"version":3,"file":"lib_course_list_courselist_js-lib_course_list_index_js-lib_index_js.ef460783d34f84153eeb.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAA+C;AACS;AACV;AACK;AACpB;AACmC;AAC3D;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6DAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA,mFAAmF,iCAAiC;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6DAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAmB;AAC9C,6BAA6B,gDAAmB;AAChD,qBAAqB,gDAAmB,UAAU,4BAA4B;AAC9E,QAAQ,oEAAkB;AAC1B;AACA;AACA,sBAAsB,wDAAM;AAC5B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,0EAA0E,WAAW,KAAK,OAAO;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,WAAW,KAAK,OAAO;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,+EAA+E,WAAW,KAAK,OAAO;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qCAAqC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6DAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6DAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gCAAgC,0DAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,WAAW,KAAK,OAAO;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6DAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtnByC;AACU;AACuB;AACnE,mCAAmC,mDAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAU;AACjC;AACA;AACA,+BAA+B,2DAAc;AAC7C,YAAY,uDAAU;AACtB;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAU;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8EAA8E,OAAO;AACrF,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;AC/G8C;AACL;AACzC;AACA;AACO,wCAAwC;AAC/C,uBAAuB,wDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA,uDAAuD,+BAA+B,wBAAwB,+BAA+B;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAM,GAAG,YAAY;AACjC;AACA;AACA;AACA,kBAAkB,wDAAM;AACxB,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtH+C;AACS;AAClB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiwBAAwB,SAAS;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnJyC;AACa;AAC/C,+BAA+B,mDAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAU;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sFAAsF,OAAO;AAC7F,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChEuD;AACF;AACV;AACK;AACyC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,uBAAuB,wDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACO,qCAAqC,kDAAK;AACja;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAK;AAC9B;AACA;AACA,0BAA0B,qDAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAS;AACtC,yBAAyB,+DAAS;AAClC;AACA;AACA;AACA;AACA,iCAAiC,8DAAQ;AACzC;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAS;AAClC,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAS;AACtC,yBAAyB,+DAAS;AAClC,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,6BAA6B,kDAAK;AAClC;AACA;AACA;AACA,wCAAwC,qaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAS;AAC1C;AACA;AACA,6CAA6C,6EAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAM,GAAG,YAAY;AACpD;AACA;AACA;AACA,sBAAsB,wDAAM;AAC5B;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kDAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACz0BA;AACO;AACP;AACA,wCAAwC,wBAAwB;AAChE,IAAI,gBAAgB;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,IAAI,uBAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB,IAAI,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;AChS8C;AACvC,+BAA+B,wDAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtB8E;AACQ;AAC3B;AACG;AACb;AACO;AACO;AACP;AACO;AACR;AACT;AACiB;AACT;AACC;AACY;AACL;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,iEAAe,EAAE,8DAAS,EAAE,yEAAc;AACzD;AACA;AACA;AACA;AACA,yBAAyB,6DAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kDAAI,GAAG,wBAAwB;AAChE;AACA;AACA;AACA,mCAAmC,yCAAyC;AAC5E,mCAAmC,qCAAqC;AACxE,mCAAmC,oCAAoC;AACvE,mCAAmC,yCAAyC;AAC5E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,0CAA0C;AAC7E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAe,EAAE,iEAAa;AAC7C;AACA;AACA;AACA;AACA,0BAA0B,+DAAa;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,yEAAoB;AAC5D,iCAAiC,gEAAc,GAAG,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAe,EAAE,iEAAa;AAC7C;AACA;AACA;AACA,0BAA0B,+DAAa;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,iEAAgB;AACxD,iCAAiC,gEAAc,GAAG,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAmB;AAC3B,QAAQ,oEAAe;AACvB,QAAQ,iEAAa;AACrB,QAAQ,4DAAO;AACf,QAAQ,yEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAAa;AACvC;AACA,SAAS;AACT;AACA;AACA,oCAAoC,gEAAgB;AACpD,6BAA6B,gEAAc,GAAG,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAgB;AACjD,sCAAsC,yDAAM;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAgB;AACjD,sCAAsC,yDAAM;AAC5C;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B,eAAe,8DAAS;AACxB;AACA,0BAA0B,mDAAK;AAC/B;AACA,2CAA2C,6EAAsB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA,2DAA2D,wEAAe;AAC1E;AACA;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;ACtWsD;AACK;AACX;AACgB;AAClE,gCAAgC;AAChC,6BAA6B,+DAAa;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAkB;AAClC;AACA;AACA,8BAA8B,wDAAM;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAU,2BAA2B,gBAAgB;AACjE,gBAAgB,0DAAQ;AACxB;AACA;AACA,aAAa;AACb,gBAAgB,oEAAkB;AAClC;AACA,8CAA8C,OAAO;AACrD,8BAA8B,wDAAM;AACpC;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAkB;AAClC;AACA;AACA,8BAA8B,wDAAM;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAU;AACtB;AACA,gBAAgB,oEAAkB;AAClC;AACA,mDAAmD,OAAO;AAC1D,8BAA8B,wDAAM;AACpC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;ACxI+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA","sources":["webpack://@jupyter/nbgrader/./lib/assignment_list/assignmentlist.js","webpack://@jupyter/nbgrader/./lib/assignment_list/index.js","webpack://@jupyter/nbgrader/./lib/common/validate.js","webpack://@jupyter/nbgrader/./lib/course_list/courselist.js","webpack://@jupyter/nbgrader/./lib/course_list/index.js","webpack://@jupyter/nbgrader/./lib/create_assignment/create_assignment_extension.js","webpack://@jupyter/nbgrader/./lib/create_assignment/create_assignment_model.js","webpack://@jupyter/nbgrader/./lib/formgrader/index.js","webpack://@jupyter/nbgrader/./lib/index.js","webpack://@jupyter/nbgrader/./lib/validate_assignment/index.js","webpack://@jupyter/nbgrader/./lib/validate_assignment/validateassignment.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Dialog } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport * as React from 'react';\nimport { showNbGraderDialog, validate } from '../common/validate';\nexport class AssignmentList {\n    constructor(widget, released_selector, fetched_selector, submitted_selector, options, app) {\n        this.list_loading_ids = ['released_assignments_list_loading', 'fetched_assignments_list_loading', 'submitted_assignments_list_loading'];\n        this.list_placeholder_ids = ['released_assignments_list_placeholder', 'fetched_assignments_list_placeholder', 'submitted_assignments_list_placeholder'];\n        this.list_error_ids = ['released_assignments_list_error', 'fetched_assignments_list_error', 'submitted_assignments_list_error'];\n        this.released_selector = released_selector;\n        this.fetched_selector = fetched_selector;\n        this.submitted_selector = submitted_selector;\n        var div_elements = widget.node.getElementsByTagName('div');\n        this.released_element = div_elements.namedItem(released_selector);\n        this.fetched_element = div_elements.namedItem(fetched_selector);\n        this.submitted_element = div_elements.namedItem(submitted_selector);\n        this.options = options;\n        this.base_url = options.get('base_url') || PageConfig.getBaseUrl();\n        this.app = app;\n        this.callback = undefined;\n    }\n    clear_list(loading) {\n        var elems = [this.released_element, this.fetched_element, this.submitted_element];\n        var i;\n        var j;\n        // remove list items\n        for (i = 0; i < elems.length; i++) {\n            for (j = 0; j < elems[i].children.length; ++j) {\n                if (elems[i].children[j].classList.contains('list_item')) {\n                    elems[i].removeChild(elems[i].children[j]);\n                    --j;\n                }\n            }\n            if (loading) {\n                // show loading\n                elems[i].children.namedItem(this.list_loading_ids[i]).hidden = false;\n                // hide placeholders and errors\n                elems[i].children.namedItem(this.list_placeholder_ids[i]).hidden = true;\n                elems[i].children.namedItem(this.list_error_ids[i]).hidden = true;\n            }\n            else {\n                // show placeholders display\n                elems[i].children.namedItem(this.list_placeholder_ids[i]).hidden = false;\n                // hide loading and errors\n                elems[i].children.namedItem(this.list_loading_ids[i]).hidden = true;\n                elems[i].children.namedItem(this.list_error_ids[i]).hidden = true;\n            }\n        }\n    }\n    ;\n    load_list_success(data) {\n        this.clear_list(false);\n        var len = data.length;\n        for (var i = 0; i < len; i++) {\n            var element = document.createElement('div');\n            new Assignment(element, data[i], this.fetched_selector, (newData) => { this.handle_load_list(newData); }, this.options, this.app);\n            if (data[i].status === 'released') {\n                this.released_element.append(element);\n                this.released_element.children.namedItem('released_assignments_list_placeholder').hidden = true;\n            }\n            else if (data[i]['status'] === 'fetched') {\n                this.fetched_element.append(element);\n                this.fetched_element.children.namedItem('fetched_assignments_list_placeholder').hidden = true;\n            }\n            else if (data[i]['status'] === 'submitted') {\n                this.submitted_element.append(element);\n                this.submitted_element.children.namedItem('submitted_assignments_list_placeholder').hidden = true;\n            }\n        }\n        var assignments = this.fetched_element.getElementsByClassName('assignment-notebooks-link');\n        for (let a of assignments) {\n            var icon = document.createElement('i');\n            icon.classList.add('fa', 'fa-caret-right');\n            a.append(icon);\n            a.onclick = function (event) {\n                if (a.children[0].classList.contains('fa-caret-right')) {\n                    a.children[0].classList.remove('fa-caret-right');\n                    a.children[0].classList.add('fa-caret-down');\n                }\n                else {\n                    a.children[0].classList.remove('fa-caret-down');\n                    a.children[0].classList.add('fa-caret-right');\n                }\n                /* Open or close collapsed child list on click */\n                const list_item = event.target.closest('.list_item');\n                list_item.querySelector('.collapse').classList.toggle('in');\n            };\n        }\n        if (this.callback) {\n            this.callback();\n            this.callback = undefined;\n        }\n    }\n    ;\n    show_error(error) {\n        var elems = [this.released_element, this.fetched_element, this.submitted_element];\n        var i;\n        // remove list items\n        for (i = 0; i < elems.length; i++) {\n            for (var j = 0; j < elems[i].children.length; ++j) {\n                if (elems[i].children[j].classList.contains('list_item')) {\n                    elems[i].removeChild(elems[i].children[j]);\n                    --j;\n                }\n            }\n            // show errors\n            elems[i].children.namedItem(this.list_error_ids[i]).hidden = false;\n            elems[i].children.namedItem(this.list_error_ids[i]).innerText = error;\n            // hide loading and placeholding\n            elems[i].children.namedItem(this.list_loading_ids[i]).hidden = true;\n            elems[i].children.namedItem(this.list_placeholder_ids[i]).hidden = true;\n        }\n    }\n    ;\n    handle_load_list(data) {\n        if (data.success) {\n            this.load_list_success(data.value);\n        }\n        else {\n            this.show_error(data.value);\n        }\n    }\n    ;\n    async load_list(course, callback) {\n        this.callback = callback;\n        this.clear_list(true);\n        try {\n            const data = await requestAPI('assignments?course_id=' + course, {\n                method: 'GET',\n            });\n            this.handle_load_list(data);\n        }\n        catch (reason) {\n            console.error(`Error on GET /assignments.\\n${reason}`);\n        }\n    }\n    ;\n}\n;\nclass Assignment {\n    constructor(element, data, parent, on_refresh, options, app) {\n        this.element = element;\n        this.data = data;\n        this.parent = parent;\n        this.on_refresh = on_refresh;\n        this.options = options;\n        this.base_url = options.get('base_url') || PageConfig.getBaseUrl();\n        this.app = app;\n        this.style();\n        this.make_row();\n    }\n    style() {\n        this.element.classList.add('list_item', \"row\");\n    }\n    ;\n    escape_id() {\n        // construct the id from the course id and the assignment id, and also\n        // prepend the id with \"nbgrader\" (this also ensures that the first\n        // character is always a letter, as required by HTML 4)\n        var id = \"nbgrader-\" + this.data['course_id'] + \"-\" + this.data['assignment_id'];\n        // replace spaces with '_'\n        id = id.replace(/ /g, \"_\");\n        // remove any characters that are invalid in HTML div ids\n        id = id.replace(/[^A-Za-z0-9\\-_]/g, \"\");\n        return id;\n    }\n    ;\n    make_link() {\n        var container = document.createElement('span');\n        ;\n        container.classList.add('item_name', 'col-sm-6');\n        var link;\n        if (this.data['status'] === 'fetched') {\n            link = document.createElement('a');\n            var id = this.escape_id();\n            link.classList.add('collapsed', 'assignment-notebooks-link');\n            link.setAttribute('role', 'button');\n            link.setAttribute('data-toggle', 'collapse');\n            link.setAttribute('data-parent', this.parent);\n            link.setAttribute('href', '#' + id);\n            link.setAttribute('aria-expanded', 'false');\n            link.setAttribute('aria-controls', id);\n        }\n        else {\n            link = document.createElement('span');\n        }\n        link.innerText = (this.data['assignment_id']);\n        container.append(link);\n        return container;\n    }\n    ;\n    submit_error(data) {\n        const body_title = React.createElement('p', null, 'Assignment not submitted:');\n        const body_content = React.createElement('pre', null, data.value);\n        const body = React.createElement(\"div\", { 'id': 'submission-message' }, [body_title, body_content]);\n        showNbGraderDialog({\n            title: \"Invalid Submission\",\n            body: body,\n            buttons: [Dialog.okButton()]\n        }, true);\n    }\n    ;\n    make_button() {\n        var container = document.createElement('span');\n        container.classList.add('item_status', 'col-sm-4');\n        var button = document.createElement('button');\n        button.classList.add('btn', 'btn-primary', 'btn-xs');\n        container.append(button);\n        var that = this;\n        if (this.data['status'] === 'released') {\n            button.innerText = \"Fetch\";\n            button.onclick = async function () {\n                button.innerText = 'Fetching...';\n                button.setAttribute('disabled', 'disabled');\n                const dataToSend = { 'course_id': that.data['course_id'], 'assignment_id': that.data['assignment_id'] };\n                try {\n                    const reply = await requestAPI('assignments/fetch', {\n                        body: JSON.stringify(dataToSend),\n                        method: 'POST'\n                    });\n                    that.on_refresh(reply);\n                }\n                catch (reason) {\n                    remove_children(container);\n                    container.innerText = 'Error fetching assignment.';\n                    console.error(`Error on POST /assignment_list/fetch ${dataToSend}.\\n${reason}`);\n                }\n            };\n        }\n        else if (this.data.status == 'fetched') {\n            button.innerText = \"Submit\";\n            button.onclick = async function () {\n                button.innerText = 'submitting...';\n                button.setAttribute('disabled', 'disabled');\n                const dataToSend = { course_id: that.data['course_id'], assignment_id: that.data['assignment_id'] };\n                try {\n                    const reply = await requestAPI('assignments/submit', {\n                        body: JSON.stringify(dataToSend),\n                        method: 'POST'\n                    });\n                    if (!reply.success) {\n                        that.submit_error(reply);\n                        button.innerText = 'Submit';\n                        button.removeAttribute('disabled');\n                    }\n                    else {\n                        that.on_refresh(reply);\n                    }\n                }\n                catch (reason) {\n                    remove_children(container);\n                    container.innerText = 'Error submitting assignment.';\n                    console.error(`Error on POST /assignment_list/assignments/submit ${dataToSend}.\\n${reason}`);\n                }\n            };\n        }\n        else if (this.data.status == 'submitted') {\n            button.innerText = \"Fetch Feedback\";\n            button.onclick = async function () {\n                button.innerText = 'Fetching Feedback...';\n                button.setAttribute('disabled', 'disabled');\n                const dataToSend = { course_id: that.data['course_id'], assignment_id: that.data['assignment_id'] };\n                try {\n                    const reply = await requestAPI('assignments/fetch_feedback', {\n                        body: JSON.stringify(dataToSend),\n                        method: 'POST'\n                    });\n                    that.on_refresh(reply);\n                }\n                catch (reason) {\n                    remove_children(container);\n                    container.innerText = 'Error fetching feedback.';\n                    console.error(`Error on POST /assignments/fetch_feedback ${dataToSend}.\\n${reason}`);\n                }\n            };\n        }\n        return container;\n    }\n    ;\n    make_row() {\n        var row = document.createElement('div');\n        row.classList.add('col-md-12');\n        var link = this.make_link();\n        row.append(link);\n        var s = document.createElement('span');\n        s.classList.add('item_course', 'col-sm-2');\n        s.innerText = this.data['course_id'];\n        row.append(s);\n        var id, element;\n        var children = document.createElement('div');\n        if (this.data['status'] == 'submitted') {\n            id = this.escape_id() + '-submissions';\n            children.id = id;\n            children.classList.add('panel-collapse', 'list_container', 'assignment-notebooks');\n            children.setAttribute('role', 'tabpanel');\n            var d = document.createElement('div');\n            d.classList.add('list_item', 'row');\n            children.append(d);\n            for (var i = 0; i < this.data['submissions'].length; i++) {\n                element = document.createElement('div');\n                new Submission(element, this.data.submissions[i], this.options, this.app);\n                children.append(element);\n            }\n        }\n        else if (this.data['status'] === 'fetched') {\n            id = this.escape_id();\n            children.id = id;\n            children.classList.add('panel-collapse', 'list_container', 'assignment-notebooks', 'collapse');\n            children.setAttribute('role', 'tabpanel');\n            var d = document.createElement('div');\n            d.classList.add('list_item', 'row');\n            children.append(d);\n            for (var i = 0; i < this.data['notebooks'].length; i++) {\n                element = document.createElement('div');\n                this.data.notebooks[i]['course_id'] = this.data['course_id'];\n                this.data.notebooks[i]['assignment_id'] = this.data['assignment_id'];\n                new Notebook(element, this.data.notebooks[i], this.options, this.app);\n                children.append(element);\n            }\n        }\n        row.append(this.make_button());\n        this.element.innerHTML = '';\n        this.element.append(row);\n        this.element.append(children);\n    }\n    ;\n}\n;\nconst remove_children = function (element) {\n    element.innerHTML = '';\n};\nclass Submission {\n    constructor(element, data, options, app) {\n        this.element = element;\n        this.data = data;\n        this.options = options;\n        this.base_url = options.get('base_url') || PageConfig.getBaseUrl();\n        this.app = app;\n        this.style();\n        this.make_row();\n    }\n    style() {\n        this.element.classList.add('list_item', 'row', 'nested_list_item');\n    }\n    ;\n    make_row() {\n        var container = document.createElement('div');\n        container.classList.add('col-md-12');\n        var status = document.createElement('span');\n        status.classList.add('item_name', 'col-sm-6');\n        var s = document.createElement('span').innerText = this.data['timestamp'];\n        status.append(s);\n        if (this.data['has_local_feedback'] && !this.data['feedback_updated']) {\n            var app = this.app;\n            var feedback_path = this.data['local_feedback_path'];\n            // var url = URLExt.join(this.base_url, 'tree', this.data['local_feedback_path']);\n            var link = document.createElement('a');\n            link.onclick = function () {\n                app.commands.execute('filebrowser:go-to-path', {\n                    path: feedback_path\n                });\n            };\n            link.innerText = ' (view feedback)';\n            status.append(link);\n        }\n        else if (this.data['has_exchange_feedback']) {\n            var feedback = document.createElement('span');\n            feedback.innerText = ' (feedback available to fetch)';\n            status.append(feedback);\n        }\n        else {\n            var feedback = document.createElement('span');\n            feedback.innerText = '';\n            status.append(feedback);\n        }\n        container.append(status);\n        var s1 = document.createElement('span');\n        s1.classList.add('item_course', 'col-sm-2');\n        container.append(s1);\n        var s2 = document.createElement('span');\n        s2.classList.add('item_status', 'col-sm-4');\n        container.append(s2);\n        this.element.append(container);\n    }\n    ;\n}\n;\nclass Notebook {\n    constructor(element, data, options, app) {\n        this.element = element;\n        this.data = data;\n        this.options = options;\n        this.base_url = options.get('base_url') || PageConfig.getBaseUrl();\n        this.app = app;\n        this.style();\n        this.make_row();\n    }\n    style() {\n        this.element.classList.add('list_item', 'row', 'nested_list_item');\n    }\n    ;\n    make_button() {\n        var that = this;\n        var container = document.createElement('span');\n        container.classList.add('item_status', 'col-sm-4');\n        var button = document.createElement('button');\n        button.classList.add('btn', 'btn-default', 'btn-xs');\n        container.append(button);\n        button.innerText = 'Validate';\n        button.onclick = async function () {\n            button.innerText = 'Validating...';\n            button.setAttribute('disabled', 'disabled');\n            const dataToSend = { path: that.data['path'] };\n            try {\n                const reply = await requestAPI('assignments/validate', {\n                    body: JSON.stringify(dataToSend),\n                    method: 'POST'\n                });\n                button.innerText = 'Validate';\n                button.removeAttribute('disabled');\n                const success = validate(reply);\n                if (success)\n                    that.validate_success(button);\n                else\n                    that.validate_failure(button);\n            }\n            catch (reason) {\n                remove_children(container);\n                container.innerText = 'Error validating assignment.';\n                console.error(`Error on POST /assignments/validate ${dataToSend}.\\n${reason}`);\n            }\n        };\n        return container;\n    }\n    ;\n    validate_success(button) {\n        button.classList.remove('btn-default', 'btn-danger', 'btn-success');\n        button.classList.add('btn-success');\n    }\n    ;\n    validate_failure(button) {\n        button.classList.remove('btn-default', 'btn-danger', 'btn-success');\n        button.classList.add(\"btn-danger\");\n    }\n    ;\n    make_row() {\n        var app = this.app;\n        var nb_path = this.data['path'];\n        var container = document.createElement('div');\n        container.classList.add('col-md-12');\n        var s1 = document.createElement('span');\n        s1.classList.add('item_name', 'col-sm-6');\n        var a = document.createElement('a');\n        a.href = '#';\n        a.innerText = this.data['notebook_id'];\n        a.onclick = function () {\n            app.commands.execute('docmanager:open', {\n                path: nb_path\n            });\n        };\n        s1.append(a);\n        container.append(s1);\n        var s2 = document.createElement('span');\n        s2.classList.add('item_course', 'col-sm-2');\n        container.append(s2);\n        container.append(this.make_button());\n        this.element.append(container);\n    }\n    ;\n}\n;\nexport class CourseList {\n    constructor(widget, course_list_selector, default_course_selector, dropdown_selector, refresh_selector, assignment_list, options) {\n        this.options = new Map();\n        this.course_list_selector = course_list_selector;\n        this.default_course_selector = default_course_selector;\n        this.dropdown_selector = dropdown_selector;\n        this.refresh_selector = refresh_selector;\n        this.course_list_element = widget.node.getElementsByTagName('ul').namedItem(course_list_selector);\n        var buttons = widget.node.getElementsByTagName('button');\n        this.default_course_element = buttons.namedItem(default_course_selector);\n        this.dropdown_element = buttons.namedItem(dropdown_selector);\n        this.refresh_element = buttons.namedItem(refresh_selector);\n        this.assignment_list = assignment_list;\n        this.current_course = undefined;\n        //options = options || {};\n        this.options = options;\n        this.base_url = options.get('base_url') || PageConfig.getBaseUrl();\n        this.data = undefined;\n        var that = this;\n        /* Open the dropdown course_list when clicking on dropdown toggle button */\n        this.dropdown_element.onclick = function () {\n            that.course_list_element.classList.toggle('open');\n        };\n        /* Close the dropdown course_list if clicking anywhere else */\n        document.onclick = function (event) {\n            if (event.target.closest('button') != that.dropdown_element) {\n                that.course_list_element.classList.remove('open');\n            }\n        };\n        this.refresh_element.onclick = function () {\n            that.load_list();\n        };\n        this.bind_events();\n    }\n    enable_list() {\n        this.dropdown_element.removeAttribute(\"disabled\");\n    }\n    ;\n    disable_list() {\n        this.dropdown_element.setAttribute(\"disabled\", \"disabled\");\n    }\n    ;\n    clear_list() {\n        // remove list items\n        if (this.course_list_element.children.length > 0) {\n            this.course_list_element.innerHTML = '';\n        }\n    }\n    ;\n    bind_events() {\n        this.refresh_element.click();\n    }\n    ;\n    async load_list() {\n        this.disable_list();\n        this.clear_list();\n        this.assignment_list.clear_list(true);\n        try {\n            const data = await requestAPI('courses');\n            this.handle_load_list(data);\n        }\n        catch (reason) {\n            console.error(`Error on GET /courses.\\n${reason}`);\n        }\n    }\n    ;\n    handle_load_list(data) {\n        if (data.success) {\n            this.load_list_success(data.value);\n        }\n        else {\n            this.default_course_element.innerText = \"Error fetching courses!\";\n            this.enable_list();\n            this.assignment_list.show_error(data.value);\n        }\n    }\n    ;\n    load_list_success(data) {\n        this.data = data;\n        this.disable_list();\n        this.clear_list();\n        if (this.data.length === 0) {\n            this.default_course_element.innerText = \"No courses found.\";\n            this.assignment_list.clear_list(false);\n            this.enable_list();\n            return;\n        }\n        if (!this.data.includes(this.current_course)) {\n            this.current_course = undefined;\n        }\n        if (this.current_course === undefined) {\n            this.change_course(this.data[0]);\n        }\n        else {\n            // we still want to \"change\" the course here to update the\n            // assignment list\n            this.change_course(this.current_course);\n        }\n    }\n    ;\n    change_course(course) {\n        this.disable_list();\n        if (this.current_course !== undefined) {\n            this.default_course_element.innerText = course;\n        }\n        this.current_course = course;\n        this.default_course_element.innerText = this.current_course;\n        var success = () => { this.load_assignment_list_success(); };\n        this.assignment_list.load_list(course, success);\n    }\n    ;\n    load_assignment_list_success() {\n        if (this.data) {\n            var that = this;\n            var set_course = function (course) {\n                return function () { that.change_course(course); };\n            };\n            for (var i = 0; i < this.data.length; i++) {\n                var a = document.createElement('a');\n                a.href = '#';\n                a.innerText = this.data[i];\n                var element = document.createElement('li');\n                element.append(a);\n                element.onclick = set_course(this.data[i]);\n                this.course_list_element.append(element);\n            }\n            this.data = undefined;\n        }\n        this.enable_list();\n    }\n    ;\n}\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, \n    // 'assignment_list', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n","import { Widget } from '@lumino/widgets';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { requestAPI, CourseList, AssignmentList } from './assignmentlist';\nexport class AssignmentListWidget extends Widget {\n    constructor(app) {\n        super();\n        this.app = app;\n        var assignment_html = ([\n            '<div id=\"assignments\" class=\"tab-pane\">',\n            '  <div id=\"assignments_toolbar\" class=\"row list_toolbar\">',\n            '    <div class=\"col-sm-8 no-padding\">',\n            '      <span id=\"assignments_list_info\" class=\"toolbar_info\">Released, downloaded, and submitted assignments for course:</span>',\n            '      <div class=\"btn-group btn-group-xs\">',\n            '        <button type=\"button\" class=\"btn btn-default\" id=\"course_list_default\">Loading, please wait...</button>',\n            '        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" id=\"course_list_dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled=\"disabled\">',\n            '          <span class=\"caret\"></span>',\n            '          <span class=\"sr-only\">Toggle Dropdown</span>',\n            '        </button>',\n            '        <ul class=\"dropdown-menu\" id=\"course_list\">',\n            '        </ul>',\n            '      </div>',\n            '    </div>',\n            '    <div class=\"col-sm-4 no-padding tree-buttons\">',\n            '      <span id=\"assignments_buttons\" class=\"pull-right toolbar_buttons\">',\n            '      <button id=\"refresh_assignments_list\" title=\"Refresh assignments list\" class=\"btn btn-default btn-xs\"><i class=\"fa fa-refresh\"></i></button>',\n            '      </span>',\n            '    </div>',\n            '  </div>',\n            '  <div class=\"alert alert-danger version_error\">',\n            '  </div>',\n            '  <div class=\"panel-group\">',\n            '    <div class=\"panel panel-default\">',\n            '      <div class=\"panel-heading\">',\n            '        Released assignments',\n            '      </div>',\n            '      <div class=\"panel-body\">',\n            '        <div id=\"released_assignments_list\" class=\"list_container\">',\n            '          <div id=\"released_assignments_list_placeholder\" class=\"list_placeholder\">',\n            '            <div> There are no assignments to fetch. </div>',\n            '          </div>',\n            '          <div id=\"released_assignments_list_loading\" class=\"list_loading\">',\n            '            <div> Loading, please wait... </div>',\n            '          </div>',\n            '          <div id=\"released_assignments_list_error\" class=\"list_error\">',\n            '            <div></div>',\n            '          </div>',\n            '        </div>',\n            '      </div>',\n            '    </div>',\n            '    <div class=\"panel panel-default\">',\n            '      <div class=\"panel-heading\">',\n            '        Downloaded assignments',\n            '      </div>',\n            '      <div class=\"panel-body\">',\n            '        <div id=\"fetched_assignments_list\" class=\"list_container\" role=\"tablist\" aria-multiselectable=\"true\">',\n            '          <div id=\"fetched_assignments_list_placeholder\" class=\"list_placeholder\">',\n            '            <div> There are no downloaded assignments. </div>',\n            '          </div>',\n            '          <div id=\"fetched_assignments_list_loading\" class=\"list_loading\">',\n            '            <div> Loading, please wait... </div>',\n            '          </div>',\n            '          <div id=\"fetched_assignments_list_error\" class=\"list_error\">',\n            '            <div></div>',\n            '          </div>',\n            '        </div>',\n            '      </div>',\n            '    </div>',\n            '    <div class=\"panel panel-default\">',\n            '      <div class=\"panel-heading\">',\n            '        Submitted assignments',\n            '      </div>',\n            '      <div class=\"panel-body\">',\n            '        <div id=\"submitted_assignments_list\" class=\"list_container\">',\n            '          <div id=\"submitted_assignments_list_placeholder\" class=\"list_placeholder\">',\n            '            <div> There are no submitted assignments. </div>',\n            '          </div>',\n            '          <div id=\"submitted_assignments_list_loading\" class=\"list_loading\">',\n            '            <div> Loading, please wait... </div>',\n            '          </div>',\n            '          <div id=\"submitted_assignments_list_error\" class=\"list_error\">',\n            '            <div></div>',\n            '          </div>',\n            '        </div>',\n            '      </div>',\n            '    </div>',\n            '  </div>   ',\n            '</div>'\n        ].join('\\n'));\n        this.node.innerHTML = assignment_html;\n        this.node.style.overflowY = 'auto';\n        let base_url = PageConfig.getBaseUrl();\n        let options = new Map();\n        options.set('base_url', base_url);\n        var assignment_l = new AssignmentList(this, 'released_assignments_list', 'fetched_assignments_list', 'submitted_assignments_list', options, this.app);\n        new CourseList(this, 'course_list', 'course_list_default', 'course_list_dropdown', 'refresh_assignments_list', assignment_l, options);\n        this.checkNbGraderVersion();\n    }\n    checkNbGraderVersion() {\n        var warning = this.node.getElementsByClassName('version_error')[0];\n        warning.hidden = false;\n        requestAPI('nbgrader_version?version=' + \"0.9.5\")\n            .then(response => {\n            if (!response['success']) {\n                warning.innerText = response['message'];\n                warning.style.display = 'block';\n            }\n        })\n            .catch(reason => {\n            console.error(`Error on GET /assignment_list/nbgrader_version.\\n${reason}`);\n        });\n    }\n}\n","import { Dialog } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nconst CSS_ERROR_DIALOG = 'nbgrader-ErrorDialog';\nconst CSS_SUCCESS_DIALOG = 'nbgrader-SuccessDialog';\nexport function showNbGraderDialog(options = {}, error = false) {\n    const dialog = new Dialog(options);\n    if (error)\n        dialog.addClass(CSS_ERROR_DIALOG);\n    else\n        dialog.addClass(CSS_SUCCESS_DIALOG);\n    return dialog.launch();\n}\nexport function validate(data) {\n    var body = document.createElement('div');\n    body.id = 'validation-message';\n    var isError = false;\n    var success = false;\n    if (data.success === true) {\n        if (typeof (data.value) === \"string\") {\n            data = JSON.parse(data.value);\n        }\n        else {\n            data = data.value;\n        }\n        if (data.type_changed !== undefined) {\n            isError = true;\n            for (let i = 0; i < data.type_changed.length; i++) {\n                var div = document.createElement('div');\n                var paragraph = document.createElement('p');\n                paragraph.innerText = `The following ${data.type_changed[i].old_type} cell has changed to a ${data.type_changed[i].new_type} cell, but it should not have!`;\n                div.append(paragraph);\n                body.append(div);\n                var pre = document.createElement('pre');\n                pre.innerText = data.type_changed[i].source;\n                body.append(pre);\n            }\n            body.classList.add(\"validation-type-changed\");\n        }\n        else if (data.changed !== undefined) {\n            isError = true;\n            for (var i = 0; i < data.changed.length; i++) {\n                var div = document.createElement('div');\n                var paragraph = document.createElement('p');\n                paragraph.innerText = 'The source of the following cell has changed, but it should not have!';\n                div.append(paragraph);\n                body.append(div);\n                var pre = document.createElement('pre');\n                pre.innerText = data.changed[i].source;\n                body.append(pre);\n            }\n            body.classList.add(\"validation-changed\");\n        }\n        else if (data.passed !== undefined) {\n            for (var i = 0; i < data.changed.length; i++) {\n                var div = document.createElement('div');\n                var paragraph = document.createElement('p');\n                paragraph.innerText = 'The following cell passed:';\n                div.append(paragraph);\n                body.append(div);\n                var pre = document.createElement('pre');\n                pre.innerText = data.passed[i].source;\n                body.append(pre);\n            }\n            body.classList.add(\"validation-passed\");\n        }\n        else if (data.failed !== undefined) {\n            isError = true;\n            for (var i = 0; i < data.failed.length; i++) {\n                var div = document.createElement('div');\n                var paragraph = document.createElement('p');\n                paragraph.innerText = 'The following cell failed:';\n                div.append(paragraph);\n                body.append(div);\n                const source = document.createElement('div');\n                source.classList.add('jp-RenderedText');\n                var pre1 = document.createElement('pre');\n                pre1.innerText = data.failed[i].source;\n                source.append(pre1);\n                body.append(source);\n                const error = document.createElement('div');\n                error.classList.add('jp-RenderedText');\n                var pre2 = document.createElement('pre');\n                pre2.innerHTML = data.failed[i].error;\n                error.append(pre2);\n                body.append(error);\n            }\n            body.classList.add('validation-failed');\n        }\n        else {\n            var div = document.createElement('div');\n            var paragraph = document.createElement('p');\n            paragraph.innerText = 'Success! Your notebook passes all the tests.';\n            div.append(paragraph);\n            body.append(div);\n            body.classList.add(\"validation-success\");\n            success = true;\n        }\n    }\n    else {\n        isError = true;\n        var div = document.createElement('div');\n        var paragraph = document.createElement('p');\n        paragraph.innerText = 'There was an error running the validate command:';\n        div.append(paragraph);\n        body.append(div);\n        var pre = document.createElement('pre');\n        pre.innerText = data.value;\n        body.append(pre);\n    }\n    let b;\n    b = new Widget({ node: body });\n    showNbGraderDialog({\n        title: \"Validation Results\",\n        body: b,\n        buttons: [Dialog.okButton()]\n    }, isError);\n    return success;\n}\n;\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { commandIDs } from '../index';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, \n    // 'course_list', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\nfunction createElementFromCourse(data, app, isNotebook) {\n    var element = document.createElement('div');\n    element.classList.add('list_item', 'row');\n    var row = document.createElement('div');\n    row.classList.add('col-md-12');\n    var container = document.createElement('span');\n    container.classList.add('item_name', 'col-sm-2');\n    var anchor = document.createElement('a');\n    anchor.href = '#';\n    anchor.innerText = data['course_id'];\n    if (data['kind'] == 'local') {\n        anchor.href = '#';\n        anchor.onclick = function () {\n            app.commands.execute(commandIDs.openFormgrader, data);\n        };\n    }\n    else {\n        const url = data['url'];\n        if (isNotebook) {\n            anchor.href = url.replace(/\\/lab(\\/|\\?)?/, '/tree$1');\n        }\n        else {\n            anchor.href = url;\n        }\n        anchor.target = 'blank';\n    }\n    var fgkind = document.createElement('span');\n    fgkind.classList.add('item_course', 'col-sm-2');\n    fgkind.textContent = data['kind'];\n    container.append(anchor);\n    row.append(container);\n    row.append(fgkind);\n    element.append(row);\n    return element;\n}\nexport class CourseList {\n    constructor(course_list_element, app, isNotebook) {\n        this.course_list_element = course_list_element;\n        this.app = app;\n        this._isNotebook = isNotebook;\n        this.listplaceholder = document.createElement('div');\n        this.listplaceholder.id = 'formgrader_list_placeholder';\n        this.listplaceholder.classList.add('list_placeholder');\n        var listplaceholdertext = document.createElement('div');\n        listplaceholdertext.textContent = 'There are no available formgrader services.';\n        this.listplaceholder.hidden = true;\n        this.listplaceholder.appendChild(listplaceholdertext);\n        this.course_list_element.appendChild(this.listplaceholder);\n        this.listloading = document.createElement('div');\n        this.listloading.id = 'formgrader_list_loading';\n        this.listloading.classList.add('list_loading');\n        var listloadingtext = document.createElement('div');\n        listloadingtext.textContent = 'Loading, please wait...';\n        this.listloading.appendChild(listloadingtext);\n        this.course_list_element.appendChild(this.listloading);\n        this.listerror = document.createElement('div');\n        this.listerror.id = 'formgrader_list_error';\n        this.listerror.classList.add('list_error');\n        this.listerrortext = document.createElement('div');\n        this.listerrortext.textContent = 'There are no available formgrader services.';\n        this.listerror.hidden = true;\n        this.listerror.appendChild(this.listerrortext);\n        this.course_list_element.appendChild(this.listerror);\n    }\n    clear_list(loading) {\n        while (this.course_list_element.lastChild.classList.contains('list_item')) {\n            this.course_list_element.removeChild(this.course_list_element.lastChild);\n        }\n        if (loading) {\n            // show loading\n            this.listloading.hidden = false;\n            // hide placeholders and errors\n            this.listplaceholder.hidden = true;\n            this.listerror.hidden = true;\n        }\n        else {\n            // show placeholders\n            this.listplaceholder.hidden = false;\n            // hide loading and errors\n            this.listloading.hidden = true;\n            this.listerror.hidden = true;\n        }\n    }\n    show_error(error) {\n        while (this.course_list_element.lastChild.classList.contains('list_item')) {\n            this.course_list_element.removeChild(this.course_list_element.lastChild);\n        }\n        // show errors\n        this.listerrortext.textContent = error.message;\n        this.listerror.hidden = false;\n        // hide loading and placeholding\n        this.listloading.hidden = true;\n        this.listplaceholder.hidden = true;\n    }\n    load_list() {\n        this.clear_list(true);\n        requestAPI('formgraders')\n            .then((data) => this.handle_load_list.call(this, data))\n            .catch(this.show_error);\n    }\n    handle_load_list(data) {\n        if (data.success) {\n            this.load_list_success(data.value);\n        }\n        else {\n            this.show_error(data.value);\n        }\n    }\n    load_list_success(data) {\n        this.clear_list(false);\n        var len = data.length;\n        if (len > 0) {\n            this.listplaceholder.hidden = true;\n        }\n        for (var i = 0; i < len; i++) {\n            this.course_list_element.appendChild(createElementFromCourse(data[i], this.app, this._isNotebook));\n        }\n    }\n}\n","import { Widget } from '@lumino/widgets';\nimport { requestAPI, CourseList } from './courselist';\nexport class CourseListWidget extends Widget {\n    constructor(app, isNotebook) {\n        super();\n        this.app = app;\n        var maindiv = document.createElement('div');\n        maindiv.id = 'courses';\n        maindiv.classList.add(\"tab-pane\");\n        this.version_alert = document.createElement('div');\n        this.version_alert.classList.add('alert', 'alert-danger', 'version_error');\n        this.version_alert.hidden = true;\n        maindiv.appendChild(this.version_alert);\n        var panelgroup = document.createElement('div');\n        panelgroup.classList.add('panel-group');\n        var panel = document.createElement('div');\n        panel.classList.add('panel', 'panel-default');\n        var panelheading = document.createElement('div');\n        panelheading.classList.add('panel-heading');\n        panelheading.textContent = 'Available formgraders';\n        var formgraderbuttons = document.createElement('span');\n        formgraderbuttons.id = 'formgrader_buttons';\n        formgraderbuttons.classList.add('pull-right', 'toolbar_buttons');\n        var refreshbutton = document.createElement('button');\n        refreshbutton.id = 'refresh_formgrader_list';\n        refreshbutton.title = 'Refresh formgrader list';\n        refreshbutton.classList.add('btn', 'btn-default', 'btn-xs');\n        // I have no idea why this is an italics tag, but I'm just recreating it so :/\n        var buttonimg = document.createElement('i');\n        buttonimg.classList.add('fa', 'fa-refresh');\n        refreshbutton.appendChild(buttonimg);\n        formgraderbuttons.appendChild(refreshbutton);\n        panelheading.appendChild(formgraderbuttons);\n        panel.appendChild(panelheading);\n        var panelbody = document.createElement('div');\n        panelbody.classList.add('panel-body');\n        var formgraderlist = document.createElement('div');\n        formgraderlist.id = 'formgrader_list';\n        formgraderlist.classList.add('list_container');\n        // further initialization of formgraderlist is in here\n        this.courselist = new CourseList(formgraderlist, this.app, isNotebook);\n        panelbody.appendChild(formgraderlist);\n        panel.appendChild(panelbody);\n        panelgroup.appendChild(panel);\n        maindiv.appendChild(panelgroup);\n        this.node.appendChild(maindiv);\n        this.node.style.overflowY = 'auto';\n        refreshbutton.onclick = () => this.courselist.load_list.call(this.courselist);\n        this.checkNbGraderVersion();\n        this.courselist.load_list();\n    }\n    checkNbGraderVersion() {\n        let nbgrader_version = '0.9.5';\n        requestAPI('nbgrader_version?version=' + nbgrader_version)\n            .then(response => {\n            if (!response['success']) {\n                this.version_alert.textContent = response['message'];\n                this.version_alert.hidden = false;\n            }\n        })\n            .catch(reason => {\n            console.error(`The course_list server extension appears to be missing.\\n${reason}`);\n        });\n    }\n}\n","import { Dialog, Styling } from '@jupyterlab/apputils';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, Widget } from '@lumino/widgets';\nimport { CellModel, NBGRADER_SCHEMA_VERSION, ToolData } from './create_assignment_model';\nconst CSS_CELL_HEADER = 'nbgrader-CellHeader';\nconst CSS_CELL_ID = 'nbgrader-CellId';\nconst CSS_CELL_POINTS = 'nbgrader-CellPoints';\nconst CSS_CELL_TYPE = 'nbgrader-CellType';\nconst CSS_CELL_WIDGET = 'nbgrader-CellWidget';\nconst CSS_CREATE_ASSIGNMENT_WIDGET = 'nbgrader-CreateAssignmentWidget';\nconst CSS_LOCK_BUTTON = 'nbgrader-LockButton';\nconst CSS_MOD_ACTIVE = 'nbgrader-mod-active';\nconst CSS_MOD_HIGHLIGHT = 'nbgrader-mod-highlight';\nconst CSS_MOD_LOCKED = 'nbgrader-mod-locked';\nconst CSS_MOD_UNEDITABLE = 'nbgrader-mod-uneditable';\nconst CSS_NOTEBOOK_HEADER_WIDGET = 'nbgrader-NotebookHeaderWidget';\nconst CSS_NOTEBOOK_PANEL_WIDGET = 'nbgrader-NotebookPanelWidget';\nconst CSS_NOTEBOOK_POINTS = 'nbgrader-NotebookPoints';\nconst CSS_NOTEBOOK_WIDGET = 'nbgrader-NotebookWidget';\nconst CSS_TOTAL_POINTS_INPUT = 'nbgrader-TotalPointsInput';\nconst CSS_ERROR_DIALOG = 'nbgrader-ErrorDialog';\nfunction showErrorDialog(options = {}) {\n    const dialog = new Dialog(options);\n    dialog.addClass(CSS_ERROR_DIALOG);\n    return dialog.launch();\n}\n/**\n * A widget which shows the \"Create Assignment\" widgets for the active notebook.\n */\nexport class CreateAssignmentWidget extends Panel {\n    constructor(tracker, labShell) {\n        super();\n        this._notebookPanelWidgets = new Map();\n        this.addClass(CSS_CREATE_ASSIGNMENT_WIDGET);\n        tracker.currentChanged.connect(this._onCurrentNotebookChange, this);\n        if (labShell) {\n            labShell.currentChanged.connect(this._onMainAreaActiveChange, this);\n        }\n        this._activeNotebook = null;\n        this._notebookTracker = tracker;\n        this._labShell = labShell;\n    }\n    /**\n     * Dispose of the Panel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._notebookPanelWidgets != null) {\n            for (const widget of this._notebookPanelWidgets) {\n                widget[1].dispose();\n            }\n        }\n        this._notebookTracker.currentChanged.disconnect(this._onCurrentNotebookChange, this);\n        if (this._labShell) {\n            this._labShell.currentChanged.disconnect(this._onMainAreaActiveChange, this);\n        }\n        this._activeNotebook = null;\n        this._notebookPanelWidgets = null;\n        this._notebookTracker = null;\n        super.dispose();\n    }\n    onBeforeShow(msg) {\n        super.onBeforeShow(msg);\n        if (this._activeNotebook != null) {\n            const notebookWidget = this._notebookPanelWidgets.get(this._activeNotebook);\n            if (notebookWidget == null) {\n                this._addNotebookWidget(this._notebookTracker, this._activeNotebook);\n            }\n            else {\n                notebookWidget.show();\n            }\n        }\n    }\n    /**\n     * Is the widget available (is there a notebook file visible in main area) ?\n     */\n    isAvailable() {\n        if (this._activeNotebook === null) {\n            return false;\n        }\n        else {\n            return this._activeNotebook.isVisible;\n        }\n    }\n    /*\n     * Check if the widget must be visible :\n     *  -> is there an active Notebook visible in main panel ?\n     */\n    onAfterShow() {\n        if (!this._labShell)\n            return;\n        const widgets = this._labShell.widgets('main');\n        if (this._activeNotebook == null) {\n            this._hideRightPanel();\n        }\n        else {\n            for (let w of widgets) {\n                if (w.title == this._activeNotebook.title) {\n                    if (!w.isVisible)\n                        this._hideRightPanel();\n                    else\n                        w.activate();\n                }\n            }\n            ;\n        }\n    }\n    /**\n     * Add a notebook widget in the panel, which handle each cell of the notebookPanel.\n     */\n    async _addNotebookWidget(tracker, panel) {\n        if (panel === null)\n            return;\n        await panel.revealed;\n        const notebookPanelWidget = new NotebookPanelWidget(panel);\n        this.addWidget(notebookPanelWidget);\n        this._notebookPanelWidgets.set(panel, notebookPanelWidget);\n        panel.disposed.connect(() => {\n            notebookPanelWidget.dispose();\n        });\n        notebookPanelWidget.disposed.connect(() => {\n            this._notebookPanelWidgets.delete(panel);\n        });\n        if (tracker.currentWidget != panel) {\n            notebookPanelWidget.hide();\n        }\n        return panel.revealed;\n    }\n    /**\n     * handle change of current notebook panel.\n     */\n    async _onCurrentNotebookChange(tracker, panel) {\n        if (this._activeNotebook != null) {\n            const widget = this._notebookPanelWidgets.get(this._activeNotebook);\n            if (widget != null) {\n                widget.hide();\n            }\n        }\n        if (panel != null) {\n            if (this.isVisible && this._notebookPanelWidgets.get(panel) == null) {\n                await this._addNotebookWidget(tracker, panel);\n            }\n            const widget = this._notebookPanelWidgets.get(panel);\n            if (widget != null) {\n                widget.show();\n            }\n        }\n        this._activeNotebook = panel;\n    }\n    /*\n     * The listener on the main area tab change, to collapse\n     * create_assignment widget if the current tab is not a Notebook.\n     */\n    _onMainAreaActiveChange(shell, changed) {\n        if (!(changed.newValue instanceof NotebookPanel) && this.isVisible) {\n            this._hideRightPanel();\n        }\n    }\n    /**\n     * Hide the right panel.\n     */\n    _hideRightPanel() {\n        this._labShell.collapseRight();\n    }\n}\n/**\n * Shows a cell's assignment data.\n */\nclass CellWidget extends Panel {\n    constructor(cellModel, notebookPanel) {\n        super();\n        this._click = new Signal(this);\n        this._notebookPanel = notebookPanel;\n        this._cellModel = cellModel;\n        this._cellModel.metadataChanged.connect(this._onMetadataChange, this);\n        this._initLayout();\n        this._initInputListeners();\n        this._initMetadata(cellModel);\n        this.addClass(CSS_CELL_WIDGET);\n        this.node.addEventListener('click', this._onClick.bind(this));\n        this.cellModel.stateChanged.connect(this._onStateChange, this);\n        // Try to update the prompt (works only if cell widget has been created).\n        this._updatePrompt();\n    }\n    /**\n     * The notebook cell associated with this widget.\n     */\n    get cellModel() {\n        return this._cellModel;\n    }\n    cleanNbgraderData(cellModel) {\n        CellModel.cleanNbgraderData(cellModel, cellModel.type);\n    }\n    /**\n     * A signal for when this widget receives a click event.\n     */\n    get click() {\n        return this._click;\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.cellModel.metadataChanged.disconnect(this._onMetadataChange, this);\n        this.node.removeEventListener('click', this._onClick);\n        this.cellModel.stateChanged.disconnect(this._onStateChange, this);\n        if (this._taskInput != null) {\n            this._taskInput.onchange = null;\n        }\n        if (this._gradeIdInput != null) {\n            this._gradeIdInput.onchange = null;\n        }\n        if (this._pointsInput != null) {\n            this._pointsInput.onchange = null;\n        }\n        this._cellModel = null;\n        this._click = null;\n        this._lock = null;\n        this._gradeId = null;\n        this._points = null;\n        this._taskInput = null;\n        this._gradeIdInput = null;\n        this._pointsInput = null;\n        super.dispose();\n    }\n    /**\n     * Sets this cell as active/focused.\n     */\n    setActive(active) {\n        if (active) {\n            this.addClass(CSS_MOD_ACTIVE);\n            // This _updatePrompt() call is a hack to create a prompt when a new cell is\n            // added in cellList. Indeed the listener catches that a new cell model is added\n            // to cellList, but not that the cell widget is created in the NotebookPanel.\n            // The prompt is a copy of the one from the cell widget but there is no listener\n            // on its creation. When a new cell is created, it is activated, so we use here\n            // this activation to create the prompt.\n            this._updatePrompt();\n        }\n        else {\n            this.removeClass(CSS_MOD_ACTIVE);\n        }\n    }\n    /**\n     * Copy the prompt of the cell widget of the notebook.\n     */\n    _updatePrompt() {\n        this._headerElement.removeChild(this._promptNode);\n        const cell = this._notebookPanel.content.widgets.find(widget => {\n            return widget.model.id === this.cellModel.id;\n        });\n        if (cell && cell.promptNode) {\n            this._promptNode = cell.promptNode.cloneNode(true);\n        }\n        else {\n            this._promptNode = document.createElement('div');\n        }\n        this._headerElement.insertBefore(this._promptNode, this._headerElement.firstChild);\n    }\n    _onStateChange(model, changedArgs) {\n        if (changedArgs.name == 'executionCount') {\n            this._updatePrompt();\n        }\n    }\n    _onMetadataChange(cellModel, changedArgs) {\n        const nbgraderData = CellModel.getNbgraderData(cellModel);\n        const toolData = CellModel.newToolData(nbgraderData, this.cellModel.type);\n        this._updateValues(toolData);\n    }\n    _getOnInputChanged() {\n        return () => {\n            const toolData = new ToolData();\n            toolData.type = this._taskInput.value;\n            if (!this._gradeId.classList.contains(CSS_MOD_UNEDITABLE)) {\n                toolData.id = this._gradeIdInput.value;\n            }\n            else {\n                const nbgraderData = CellModel.getNbgraderData(this.cellModel);\n                if ((nbgraderData === null || nbgraderData === void 0 ? void 0 : nbgraderData.data.grade_id) == null) {\n                    toolData.id = 'cell-' + this._randomString(16);\n                }\n                else {\n                    toolData.id = nbgraderData.data.grade_id;\n                }\n                this._gradeIdInput.value = toolData.id;\n            }\n            if (!this._points.classList.contains(CSS_MOD_UNEDITABLE)) {\n                toolData.points = this._pointsInput.valueAsNumber;\n            }\n            const data = CellModel.newNbgraderData(toolData);\n            CellModel.setNbgraderData(data, this.cellModel);\n        };\n    }\n    _getOnTaskInputChanged() {\n        const onInputChanged = this._getOnInputChanged();\n        return () => {\n            onInputChanged();\n            this._updateDisplayClass();\n        };\n    }\n    _onClick() {\n        this._click.emit();\n    }\n    _initInputListeners() {\n        this._taskInput.onchange = this._getOnTaskInputChanged();\n        this._gradeIdInput.onchange = this._getOnInputChanged();\n        this._pointsInput.onchange = this._getOnInputChanged();\n    }\n    _initLayout() {\n        const bodyElement = document.createElement('div');\n        const headerElement = this._newHeaderElement();\n        const taskElement = this._newTaskElement();\n        const idElement = this._newIdElement();\n        const pointsElement = this._newPointsElement();\n        const elements = [headerElement, taskElement, idElement, pointsElement];\n        const fragment = document.createDocumentFragment();\n        for (const element of elements) {\n            fragment.appendChild(element);\n        }\n        bodyElement.appendChild(fragment);\n        this.node.appendChild(bodyElement);\n        this._headerElement = headerElement;\n        this._lock = headerElement.getElementsByTagName('a')[0];\n        this._gradeId = idElement;\n        this._points = pointsElement;\n        this._taskInput = taskElement.getElementsByTagName('select')[0];\n        this._gradeIdInput = idElement.getElementsByTagName('input')[0];\n        this._pointsInput = pointsElement.getElementsByTagName('input')[0];\n    }\n    async _initMetadata(cellModel) {\n        this.cleanNbgraderData(cellModel);\n        const nbgraderData = CellModel.getNbgraderData(cellModel);\n        const toolData = CellModel.newToolData(nbgraderData, this.cellModel.type);\n        CellModel.clearCellType(cellModel);\n        this._updateDisplayClass();\n        this._updateValues(toolData);\n    }\n    _newHeaderElement() {\n        const element = document.createElement('div');\n        element.className = CSS_CELL_HEADER;\n        this._promptNode = document.createElement('div');\n        element.appendChild(this._promptNode);\n        const lockElement = document.createElement('a');\n        lockElement.className = CSS_LOCK_BUTTON;\n        const listElement = document.createElement('li');\n        listElement.className = 'fa fa-lock';\n        listElement.title = 'Student changes will be overwritten';\n        lockElement.appendChild(listElement);\n        element.appendChild(lockElement);\n        return element;\n    }\n    _newIdElement() {\n        const element = document.createElement('div');\n        element.className = CSS_CELL_ID;\n        const label = document.createElement('label');\n        label.textContent = 'ID: ';\n        const input = document.createElement('input');\n        input.type = 'text';\n        label.appendChild(input);\n        element.appendChild(label);\n        return element;\n    }\n    _newPointsElement() {\n        const element = document.createElement('div');\n        element.className = CSS_CELL_POINTS;\n        const label = document.createElement('label');\n        label.textContent = 'Points: ';\n        const input = document.createElement('input');\n        input.type = 'number';\n        input.min = '0';\n        label.appendChild(input);\n        element.appendChild(label);\n        return element;\n    }\n    _newTaskElement() {\n        const element = document.createElement('div');\n        element.className = CSS_CELL_TYPE;\n        const label = document.createElement('label');\n        label.textContent = 'Type: ';\n        const select = document.createElement('select');\n        const options = new Map([\n            ['', '-'],\n            ['manual', 'Manually graded answer'],\n            ['task', 'Manually graded task'],\n            ['solution', 'Autograded answer'],\n            ['tests', 'Autograded tests'],\n            ['readonly', 'Read-only']\n        ]);\n        if (this.cellModel.type !== 'code') {\n            options.delete('solution');\n            options.delete('tests');\n        }\n        const fragment = document.createDocumentFragment();\n        for (const optionEntry of options.entries()) {\n            const option = document.createElement('option');\n            option.value = optionEntry[0];\n            option.innerHTML = optionEntry[1];\n            fragment.appendChild(option);\n        }\n        select.appendChild(fragment);\n        const selectWrap = Styling.wrapSelect(select);\n        label.appendChild(selectWrap);\n        element.appendChild(label);\n        return element;\n    }\n    _randomString(length) {\n        var result = '';\n        var chars = 'abcdef0123456789';\n        var i;\n        for (i = 0; i < length; i++) {\n            result += chars[Math.floor(Math.random() * chars.length)];\n        }\n        return result;\n    }\n    _setGradeId(value) {\n        this._gradeIdInput.value = value;\n    }\n    _setElementEditable(element, visible) {\n        if (visible) {\n            element.classList.remove(CSS_MOD_UNEDITABLE);\n        }\n        else {\n            element.classList.add(CSS_MOD_UNEDITABLE);\n        }\n    }\n    _setGradeIdEditable(visible) {\n        this._setElementEditable(this._gradeId, visible);\n    }\n    _setPoints(value) {\n        this._pointsInput.value = value.toString();\n    }\n    _setPointsEditable(visible) {\n        this._setElementEditable(this._points, visible);\n    }\n    _setTask(value) {\n        this._taskInput.value = value;\n    }\n    _updateDisplayClass() {\n        const data = CellModel.getNbgraderData(this.cellModel);\n        if (CellModel.isRelevantToNbgrader(data)) {\n            this.addClass(CSS_MOD_HIGHLIGHT);\n        }\n        else {\n            this.removeClass(CSS_MOD_HIGHLIGHT);\n        }\n    }\n    _updateValues(data) {\n        this._setTask(data.type);\n        if (data.id == null) {\n            this._setGradeIdEditable(false);\n            this._setGradeId('');\n        }\n        else {\n            this._setGradeId(data.id);\n            this._setGradeIdEditable(true);\n        }\n        if (data.points == null) {\n            this._setPointsEditable(false);\n            this._setPoints(0);\n        }\n        else {\n            this._setPoints(data.points);\n            this._setPointsEditable(true);\n        }\n        if (data.locked) {\n            this._lock.classList.add(CSS_MOD_LOCKED);\n        }\n        else {\n            this._lock.classList.remove(CSS_MOD_LOCKED);\n        }\n    }\n}\n/**\n * The header of a notebook's Create Assignment widget.\n *\n * Displays the total points in the notebook.\n */\nclass NotebookHeaderWidget extends Widget {\n    constructor() {\n        super();\n        this.addClass(CSS_NOTEBOOK_HEADER_WIDGET);\n        this._initLayout();\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._pointsInput = null;\n        super.dispose();\n    }\n    /**\n     * The total points in the notebook.\n     */\n    set totalPoints(points) {\n        if (this._pointsInput != null) {\n            this._pointsInput.value = points.toString();\n        }\n    }\n    _initLayout() {\n        const totalPoints = this._newTotalPointsElement();\n        this.node.appendChild(totalPoints);\n        this._pointsInput = totalPoints.getElementsByTagName('input')[0];\n    }\n    _newTotalPointsElement() {\n        const element = document.createElement('div');\n        element.className = CSS_NOTEBOOK_POINTS;\n        const label = document.createElement('label');\n        label.innerText = 'Total points:';\n        const input = document.createElement('input');\n        input.className = CSS_TOTAL_POINTS_INPUT;\n        input.type = 'number';\n        input.disabled = true;\n        label.appendChild(input);\n        element.appendChild(label);\n        return element;\n    }\n}\n/**\n * Contains a list of {@link CellWidget}s for a notebook.\n */\nclass NotebookWidget extends Panel {\n    constructor(panel) {\n        super();\n        this._activeCellModel = null;\n        this._cellMetadataChanged = new Signal(this);\n        this._cellWidgets = new Map();\n        this._activeCellModel = panel.content.activeCell.model;\n        this._notebookPanel = panel;\n        this.addClass(CSS_NOTEBOOK_WIDGET);\n        this._initCellWidgets(panel.content);\n        this._validateSchemaVersion();\n        this._notebookPanel.content.activeCellChanged.connect(this._onActiveCellChange, this);\n        this._notebookPanel.model.cells.changed.connect(this._onCellsListChange, this);\n        this._notebookPanel.disposed.connect(this._onNotebookDisposed, this);\n        this._notebookPanel.context.saveState.connect(this._onValidateIds, this);\n    }\n    dispose() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._cellWidgets != null) {\n            for (const widgets of this._cellWidgets) {\n                this._removeCellWidget(widgets[1]);\n            }\n        }\n        (_c = (_b = (_a = this.notebookPanel) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.activeCellChanged) === null || _c === void 0 ? void 0 : _c.disconnect(this._onActiveCellChange, this);\n        (_g = (_f = (_e = (_d = this.notebookPanel) === null || _d === void 0 ? void 0 : _d.model) === null || _e === void 0 ? void 0 : _e.cells) === null || _f === void 0 ? void 0 : _f.changed) === null || _g === void 0 ? void 0 : _g.disconnect(this._onCellsListChange, this);\n        (_k = (_j = (_h = this.notebookPanel) === null || _h === void 0 ? void 0 : _h.context) === null || _j === void 0 ? void 0 : _j.saveState) === null || _k === void 0 ? void 0 : _k.disconnect(this._onValidateIds, this);\n        (_m = (_l = this.notebookPanel) === null || _l === void 0 ? void 0 : _l.disposed) === null || _m === void 0 ? void 0 : _m.disconnect(this._onNotebookDisposed, this);\n        (_o = this.notebookPanel) === null || _o === void 0 ? void 0 : _o.dispose();\n        this._activeCellModel = null;\n        this._cellMetadataChanged = null;\n        this._cellWidgets = null;\n        this._notebookPanel = null;\n        super.dispose();\n    }\n    /**\n     * A signal which is evoked when one of the cell's metadata changes.\n     */\n    get cellMetadataChanged() {\n        return this._cellMetadataChanged;\n    }\n    /**\n     * The notebook panel associated with this widget.\n     */\n    get notebookPanel() {\n        return this._notebookPanel;\n    }\n    _onCellsListChange(sender, args) {\n        switch (args.type) {\n            case 'add': {\n                this._addCellWidget(args.newValues[0], args.newIndex);\n                break;\n            }\n            case 'move': {\n                const cellModel = this._notebookPanel.model.cells.get(args.newIndex);\n                this._moveCellWidget(cellModel, args.newIndex);\n                break;\n            }\n            case 'remove': {\n                this._cleanCellWidgets();\n                break;\n            }\n            case 'set': {\n                // Existing notebook cell changed. Update the corresponding widget.\n                // const oldCell = this.findDeadCell(this.cellWidgets.keys());\n                const oldCell = args.oldValues[0];\n                if (oldCell != null) {\n                    const newCell = args.newValues[0];\n                    this._cellWidgets.get(oldCell).dispose();\n                    this._cellWidgets.delete(oldCell);\n                    const cellWidget = this._addCellWidget(newCell, args.newIndex);\n                    cellWidget.setActive(this._activeCellModel === newCell);\n                    if (this._activeCellModel === newCell) {\n                        this._scrollIntoViewNearest(cellWidget);\n                    }\n                }\n            }\n        }\n    }\n    _addCellWidget(cellModel, index = undefined) {\n        const cellWidget = new CellWidget(cellModel, this._notebookPanel);\n        this._cellWidgets.set(cellModel, cellWidget);\n        if (index == null) {\n            this.addWidget(cellWidget);\n        }\n        else {\n            this.insertWidget(index, cellWidget);\n        }\n        cellWidget.click.connect(this._activeCellWidgetListener, this);\n        const metadataChangedHandler = this._getMetadataChangedHandler(cellWidget);\n        cellModel.metadataChanged.connect(metadataChangedHandler);\n        return cellWidget;\n    }\n    _onValidateIds(context, args) {\n        if (args != 'started') {\n            return;\n        }\n        this._validateIds();\n    }\n    /**\n     * Called when the selected cell on notebook panel changes.\n     */\n    _onActiveCellChange(notebook, cell) {\n        var _a;\n        if (cell !== null) {\n            cell.ready.then(() => {\n                var _a;\n                (_a = this._cellWidgets.get(this._activeCellModel)) === null || _a === void 0 ? void 0 : _a.setActive(false);\n                this._activeCellModel = cell.model;\n                const activeWidget = this._cellWidgets.get(cell.model);\n                activeWidget === null || activeWidget === void 0 ? void 0 : activeWidget.setActive(true);\n                if (activeWidget) {\n                    this._scrollIntoViewNearest(activeWidget);\n                }\n            });\n        }\n        else {\n            (_a = this._cellWidgets.get(this._activeCellModel)) === null || _a === void 0 ? void 0 : _a.setActive(false);\n            this._activeCellModel = null;\n        }\n    }\n    /**\n     * Called when the selected widget on this panel changes.\n     */\n    _activeCellWidgetListener(cellWidget) {\n        const cell = this.notebookPanel.content.widgets.find(widget => {\n            return widget.model.id === cellWidget.cellModel.id;\n        });\n        this.notebookPanel.content.activeCellIndex = this.notebookPanel.content.widgets.indexOf(cell);\n    }\n    /**\n     * When the notebook panel is disposed.\n     */\n    _onNotebookDisposed(panel) {\n        this.dispose();\n    }\n    _initCellWidgets(notebook) {\n        for (const cell of notebook.widgets) {\n            const cellWidget = this._addCellWidget(cell.model);\n            cellWidget.setActive(notebook.activeCell === cell);\n        }\n    }\n    _getMetadataChangedHandler(cellWidget) {\n        return (cellModel, changedArgs) => {\n            this.cellMetadataChanged.emit(cellWidget);\n        };\n    }\n    _moveCellWidget(cell, index) {\n        const cellWidget = this._cellWidgets.get(cell);\n        this.insertWidget(index, cellWidget);\n    }\n    _removeCellWidget(widget) {\n        var _a;\n        (_a = widget.click) === null || _a === void 0 ? void 0 : _a.disconnect(this._activeCellWidgetListener, this);\n        this._cellWidgets.delete(widget.cellModel);\n        widget.dispose();\n    }\n    _cleanCellWidgets() {\n        if (this._cellWidgets == null) {\n            return;\n        }\n        const widgetsToRemove = Array\n            .from(this._cellWidgets.values())\n            .filter(widget => widget.cellModel.isDisposed);\n        widgetsToRemove.forEach(widget => {\n            this._removeCellWidget(widget);\n        });\n    }\n    _validateIds() {\n        const set = new Set();\n        const valid = /^[a-zA-Z0-9_\\-]+$/;\n        for (let cellModel of this.notebookPanel.model.cells) {\n            const nbgraderData = CellModel.getNbgraderData(cellModel);\n            if (nbgraderData == null)\n                continue;\n            const id = nbgraderData.data.grade_id;\n            if (!valid.test(id)) {\n                this._warnInvalidId(true, false, id);\n                return;\n            }\n            else if (set.has(id)) {\n                this._warnInvalidId(false, true, id);\n                return;\n            }\n            else {\n                set.add(id);\n            }\n        }\n    }\n    _validateSchemaVersion() {\n        for (let cellModel of this.notebookPanel.model.cells) {\n            const nbgraderData = CellModel.getNbgraderData(cellModel);\n            let version = (nbgraderData === null) ? null : nbgraderData.data.schema_version;\n            version = version === undefined ? 0 : version;\n            if (version != null && version < NBGRADER_SCHEMA_VERSION) {\n                this._warnSchemaVersion(version);\n                return;\n            }\n        }\n    }\n    _warnInvalidId(badFormat, duplicateId, id) {\n        const options = {\n            buttons: [Dialog.okButton()],\n            title: undefined,\n            body: undefined\n        };\n        if (badFormat) {\n            options.title = 'Invalid nbgrader cell ID';\n            options.body = 'At least one cell has an invalid nbgrader ID. Cell IDs ' +\n                'must contain at least one character, and may only contain ' +\n                'letters, numbers, hyphens, and/or underscores.';\n            showErrorDialog(options);\n            return;\n        }\n        else if (duplicateId) {\n            options.title = 'Duplicate nbgrader cell ID';\n            options.body = `The nbgrader ID \"${id}\" has been used for more than ` +\n                `one cell. Please make sure all grade cells have unique ids.`;\n            showErrorDialog(options);\n            return;\n        }\n    }\n    _warnSchemaVersion(schemaVersion) {\n        const version = schemaVersion.toString();\n        const notebookPath = this.notebookPanel.sessionContext.path;\n        const body = document.createElement('p');\n        const code = document.createElement('code');\n        const bodyWidget = new Widget({ node: body });\n        const options = {\n            title: 'Outdated schema version',\n            body: bodyWidget,\n            buttons: [Dialog.okButton()]\n        };\n        body.innerText =\n            `At least one cell has an old version (${version}) of the ` +\n                'nbgrader metadata. Please back up this notebook and then ' +\n                'update the metadata on the command ' +\n                'line using the following command: ';\n        code.innerText = `nbgrader update ${notebookPath}`;\n        body.appendChild(code);\n        showErrorDialog(options);\n    }\n    _scrollIntoViewNearest(widget) {\n        const parentTop = this.node.scrollTop;\n        const parentBottom = parentTop + this.node.clientHeight;\n        const widgetTop = widget.node.offsetTop;\n        const widgetBottom = widgetTop + widget.node.clientHeight;\n        if (widgetTop < parentTop) {\n            widget.node.scrollIntoView(true);\n        }\n        else if (widgetBottom > parentBottom) {\n            if (widgetBottom - widgetTop > parentBottom - parentTop) {\n                widget.node.scrollIntoView(true);\n            }\n            else {\n                widget.node.scrollIntoView(false);\n            }\n        }\n    }\n}\n/**\n * Contains a notebook's \"Create Assignment\" UI.\n */\nclass NotebookPanelWidget extends Panel {\n    constructor(panel) {\n        super();\n        this.addClass(CSS_NOTEBOOK_PANEL_WIDGET);\n        this._initLayout(panel);\n        this._notebookHeaderWidget.totalPoints = this._calcTotalPoints();\n        panel.model.cells.changed.connect(this._onCellListChange, this);\n        this._notebookWidget.cellMetadataChanged.connect(this._onCellMetadataChange, this);\n    }\n    dispose() {\n        var _a, _b;\n        if (this.isDisposed) {\n            return;\n        }\n        this._notebookWidget.notebookPanel.model.cells.changed.disconnect(this._onCellListChange, this);\n        this._notebookWidget.cellMetadataChanged.disconnect(this._onCellMetadataChange, this);\n        (_a = this._notebookHeaderWidget) === null || _a === void 0 ? void 0 : _a.dispose();\n        (_b = this._notebookWidget) === null || _b === void 0 ? void 0 : _b.dispose();\n        this._notebookHeaderWidget = null;\n        this._notebookWidget = null;\n        super.dispose();\n    }\n    _calcTotalPoints() {\n        var _a;\n        let totalPoints = 0;\n        for (let cellModel of this._notebookWidget.notebookPanel.model.cells) {\n            const nbgraderData = CellModel.getNbgraderData(cellModel);\n            const points = (nbgraderData === null || nbgraderData.data.points === null\n                || !(nbgraderData === null || nbgraderData === void 0 ? void 0 : nbgraderData.isGradable())) ? 0 : (_a = nbgraderData.data) === null || _a === void 0 ? void 0 : _a.points;\n            totalPoints += points;\n        }\n        return totalPoints;\n    }\n    _initLayout(panel) {\n        this._notebookHeaderWidget = new NotebookHeaderWidget();\n        this._notebookWidget = new NotebookWidget(panel);\n        this.addWidget(this._notebookHeaderWidget);\n        this.addWidget(this._notebookWidget);\n    }\n    /**\n     * handle event on the cell list of the NotebookPanel.\n     */\n    _onCellListChange(cellModels, args) {\n        if (args.type != 'move') {\n            this._notebookHeaderWidget.totalPoints = this._calcTotalPoints();\n        }\n    }\n    /**\n     * handle changes on the Cell widget metadata;\n     */\n    _onCellMetadataChange(notebookWidget, cellWidget) {\n        this._notebookHeaderWidget.totalPoints = this._calcTotalPoints();\n    }\n}\n","const NBGRADER_KEY = 'nbgrader';\nexport const NBGRADER_SCHEMA_VERSION = 3;\n/**\n * A namespace for conversions between {@link NbgraderMetadata} and\n * {@link ToolData} and for reading and writing to notebook cells' metadata.\n */\nexport var CellModel;\n(function (CellModel) {\n    /**\n     * Cleans invalid nbgrader data if necessary.\n     *\n     * @returns Whether cleaning occurred.\n     */\n    function cleanNbgraderData(cellModel, cellType) {\n        const data = CellModel.getNbgraderData(cellModel);\n        if (data === null || !(data === null || data === void 0 ? void 0 : data.isInvalid(cellType))) {\n            return false;\n        }\n        data.data.schema_version = NBGRADER_SCHEMA_VERSION;\n        data.data.solution = false;\n        data.data.grade = false;\n        data.data.locked = false;\n        data.data.task = false;\n        setNbgraderData(data, cellModel);\n        return true;\n    }\n    CellModel.cleanNbgraderData = cleanNbgraderData;\n    /**\n     * Removes the \"cell_type\" property from the nbgrader data.\n     */\n    function clearCellType(cellModel) {\n        const data = cellModel.getMetadata(NBGRADER_KEY);\n        if (data == null) {\n            return;\n        }\n        if ('cell_type' in data) {\n            data['cell_type'] = undefined;\n        }\n        cellModel.setMetadata(NBGRADER_KEY, data);\n    }\n    CellModel.clearCellType = clearCellType;\n    /**\n     * Read the nbgrader data from a cell's metadata.\n     *\n     * @returns The nbgrader data, or null if it doesn't exist.\n     */\n    function getNbgraderData(cellModel) {\n        if (cellModel === null) {\n            return null;\n        }\n        const nbgraderValue = cellModel.getMetadata(NBGRADER_KEY);\n        if (nbgraderValue === undefined) {\n            return null;\n        }\n        return new NbgraderMetadata(nbgraderValue.valueOf());\n    }\n    CellModel.getNbgraderData = getNbgraderData;\n    /**\n     * @returns True if the cell is gradable.\n     */\n    function isGraded(data) {\n        return data === null || data === void 0 ? void 0 : data.isGradable();\n    }\n    CellModel.isGraded = isGraded;\n    /**\n     * @returns True if the cell relevant to nbgrader. A cell is relevant if it is\n     * gradable or contains autograder tests.\n     */\n    function isRelevantToNbgrader(data) {\n        return (data === null || data === void 0 ? void 0 : data.isGradable()) || (data === null || data === void 0 ? void 0 : data.isSolution());\n    }\n    CellModel.isRelevantToNbgrader = isRelevantToNbgrader;\n    /**\n     * Converts {@link ToolData} to {@link NbgraderMetadata}.\n     *\n     * @returns The converted data, or null if the nbgrader cell type is not set.\n     */\n    function newNbgraderData(data) {\n        if (data.type === '') {\n            return null;\n        }\n        const nbgraderData = {\n            grade: PrivateToolData.getGrade(data),\n            grade_id: PrivateToolData.getGradeId(data),\n            locked: PrivateToolData.getLocked(data),\n            points: PrivateToolData.getPoints(data),\n            schema_version: PrivateToolData.getSchemeaVersion(),\n            solution: PrivateToolData.getSolution(data),\n            task: PrivateToolData.getTask(data)\n        };\n        return new NbgraderMetadata(nbgraderData);\n    }\n    CellModel.newNbgraderData = newNbgraderData;\n    /**\n     * Converts {@link NbgraderMetadata} to {@link ToolData}.\n     *\n     * @param data The data to convert. Can be null.\n     * @param cellType The notebook cell widget type.\n     */\n    function newToolData(data, cellType) {\n        const toolData = new ToolData;\n        if (data === null || data === void 0 ? void 0 : data.isInvalid(cellType)) {\n            toolData.type = '';\n            return toolData;\n        }\n        toolData.type = (data === null || data === void 0 ? void 0 : data.getType(cellType)) || '';\n        if (toolData.type === '') {\n            return toolData;\n        }\n        if ((data === null || data === void 0 ? void 0 : data.isGrade()) || (data === null || data === void 0 ? void 0 : data.isSolution()) || (data === null || data === void 0 ? void 0 : data.isLocked())) {\n            toolData.id = (data === null || data === void 0 ? void 0 : data.getGradeId()) || '';\n        }\n        if (data === null || data === void 0 ? void 0 : data.isGradable()) {\n            toolData.points = (data === null || data === void 0 ? void 0 : data.getPoints()) || 0;\n        }\n        toolData.locked = (data === null || data === void 0 ? void 0 : data.isLocked()) || false;\n        return toolData;\n    }\n    CellModel.newToolData = newToolData;\n    /**\n     * Writes the nbgrader data to a cell's metadata.\n     *\n     * @param data The nbgrader data. If null, the nbgrader entry, if it exists,\n     * will be removed from the metadata.\n     */\n    function setNbgraderData(data, cellModel) {\n        if (data === null) {\n            if (cellModel.getMetadata(NBGRADER_KEY)) {\n                cellModel.deleteMetadata(NBGRADER_KEY);\n            }\n            return;\n        }\n        cellModel.setMetadata(NBGRADER_KEY, data.toJson());\n    }\n    CellModel.setNbgraderData = setNbgraderData;\n})(CellModel || (CellModel = {}));\nvar Private;\n(function (Private) {\n    function _to_float(val) {\n        if (val == null || val === '') {\n            return 0;\n        }\n        const valType = typeof (val);\n        if (valType === 'string') {\n            return parseFloat(val);\n        }\n        else if (valType === 'number') {\n            return val;\n        }\n        return 0;\n    }\n    Private._to_float = _to_float;\n})(Private || (Private = {}));\nvar PrivateToolData;\n(function (PrivateToolData) {\n    function getGrade(data) {\n        return data.type === 'manual' || data.type === 'tests';\n    }\n    PrivateToolData.getGrade = getGrade;\n    function getGradeId(data) {\n        return data.id === null ? '' : data.id;\n    }\n    PrivateToolData.getGradeId = getGradeId;\n    function getLocked(data) {\n        if (PrivateToolData.getSolution(data)) {\n            return false;\n        }\n        if (PrivateToolData.getGrade(data)) {\n            return true;\n        }\n        return data.type === 'task' || data.type === 'tests'\n            || data.type === 'readonly';\n    }\n    PrivateToolData.getLocked = getLocked;\n    function getPoints(data) {\n        if (!PrivateToolData.getGrade(data) && !PrivateToolData.getTask(data)) {\n            return undefined;\n        }\n        return data.points >= 0 ? data.points : 0;\n    }\n    PrivateToolData.getPoints = getPoints;\n    function getSchemeaVersion() {\n        return NBGRADER_SCHEMA_VERSION;\n    }\n    PrivateToolData.getSchemeaVersion = getSchemeaVersion;\n    function getSolution(data) {\n        return data.type === 'manual' || data.type === 'solution';\n    }\n    PrivateToolData.getSolution = getSolution;\n    function getTask(data) {\n        return data.type === 'task';\n    }\n    PrivateToolData.getTask = getTask;\n})(PrivateToolData || (PrivateToolData = {}));\n/**\n * Dummy class for representing the nbgrader cell metadata.\n */\nexport class NbgraderMetadata {\n    constructor(data) {\n        this._data = {};\n        this._data = data;\n    }\n    get data() {\n        return this._data;\n    }\n    set data(value) {\n        this._data = value;\n    }\n    getGradeId() {\n        return this.data.grade_id || '';\n    }\n    getPoints() {\n        return Private._to_float(this.data.points || 0);\n    }\n    getSchemaVersion() {\n        var _a;\n        return ((_a = this.data) === null || _a === void 0 ? void 0 : _a.schema_version) || NBGRADER_SCHEMA_VERSION;\n    }\n    getType(cellType) {\n        if (this.isTask()) {\n            return 'task';\n        }\n        else if (this.isSolution() && this.isGrade()) {\n            return 'manual';\n        }\n        else if (this.isSolution() && cellType === 'code') {\n            return 'solution';\n        }\n        else if (this.isGrade() && cellType === 'code') {\n            return 'tests';\n        }\n        else if (this.isLocked()) {\n            return 'readonly';\n        }\n        else {\n            return '';\n        }\n    }\n    isGrade() {\n        return this._data.grade || false;\n    }\n    isGradable() {\n        return this.isGrade() || this.isTask();\n    }\n    isInvalid(cellType) {\n        return !this.isTask()\n            && cellType !== 'code'\n            && (this.isSolution() !== this.isGrade());\n    }\n    isLocked() {\n        return !this.isSolution() && (this.isGradable() || this._data.locked);\n    }\n    isTask() {\n        return this._data.task || false;\n    }\n    isSolution() {\n        return this._data.solution || false;\n    }\n    toJson() {\n        const json = {};\n        if (this.data.grade !== undefined) {\n            json['grade'] = this.data.grade;\n        }\n        if (this.data.grade_id !== undefined) {\n            json['grade_id'] = this.data.grade_id;\n        }\n        if (this.data.locked !== undefined) {\n            json['locked'] = this.data.locked;\n        }\n        if (this.data.points !== undefined) {\n            json['points'] = this.data.points;\n        }\n        if (this.data.schema_version !== undefined) {\n            json['schema_version'] = this.data.schema_version;\n        }\n        if (this.data.solution !== undefined) {\n            json['solution'] = this.data.solution;\n        }\n        if (this.data.task !== undefined) {\n            json['task'] = this.data.task;\n        }\n        return json;\n    }\n}\n/**\n * Dummy class for representing the UI input/output values.\n */\nexport class ToolData {\n}\n","import { IFrame } from '@jupyterlab/apputils';\nexport class FormgraderWidget extends IFrame {\n    constructor(app, url) {\n        super();\n        this.referrerPolicy = 'strict-origin-when-cross-origin';\n        this.sandbox = ['allow-scripts', 'allow-same-origin', 'allow-forms'];\n        this.node.id = \"formgrader-iframe\";\n        this.app = app;\n        this.url = url;\n        var this_widget = this;\n        window.addEventListener('message', function (event) {\n            this_widget.on_message(event);\n        });\n    }\n    on_message(event) {\n        var contentWindow = this.node.querySelector('iframe').contentWindow;\n        if (contentWindow === event.source) {\n            var data = JSON.parse(event.data);\n            this.app.commands.execute(data.command, data.arguments);\n        }\n    }\n}\n;\n","import { ILabShell, ILayoutRestorer, IRouter } from \"@jupyterlab/application\";\nimport { ICommandPalette, MainAreaWidget, WidgetTracker } from \"@jupyterlab/apputils\";\nimport { PageConfig, URLExt } from \"@jupyterlab/coreutils\";\nimport { IDefaultFileBrowser } from \"@jupyterlab/filebrowser\";\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from \"@jupyterlab/notebook\";\nimport { ISettingRegistry } from \"@jupyterlab/settingregistry\";\nimport { ServerConnection } from \"@jupyterlab/services\";\nimport { INotebookShell } from \"@jupyter-notebook/application\";\nimport { INotebookTree } from \"@jupyter-notebook/tree\";\nimport { Menu, Panel } from '@lumino/widgets';\nimport { AssignmentListWidget } from \"./assignment_list/index\";\nimport { FormgraderWidget } from \"./formgrader/index\";\nimport { CourseListWidget } from \"./course_list/index\";\nimport { CreateAssignmentWidget } from \"./create_assignment/index\";\nimport { ButtonExtension } from \"./validate_assignment/index\";\n/**\n * The plugin IDs\n */\nconst pluginIDs = {\n    menus: '@jupyter/nbgrader:menu',\n    assignmentsList: '@jupyter/nbgrader:assignment-list',\n    coursesList: '@jupyter/nbgrader:course-list',\n    formgrader: '@jupyter/nbgrader:formgrader',\n    createAssignment: '@jupyter/nbgrader:create-assignment',\n    validateAssignment: '@jupyter/nbgrader:validate-assignment'\n};\n/**\n * The command IDs\n */\nexport const commandIDs = {\n    openAssignmentsList: 'nbgrader:open-assignment-list',\n    openCoursesList: 'nbgrader:open-course-list',\n    openFormgrader: 'nbgrader:open-formgrader',\n    openFormgraderLocal: 'nbgrader:open-formgrader-local',\n    openCreateAssignment: 'nbgrader:open-create-assignment'\n};\n/**\n * Manage the extensions available in Notebook.\n */\nconst availableExtensionsManager = {\n    id: pluginIDs.menus,\n    autoStart: true,\n    requires: [IMainMenu],\n    optional: [ICommandPalette, ILabShell, INotebookShell],\n    activate: (app, mainMenu, palette, labShell, notebookShell) => {\n        let mainExtensions = false;\n        let createExtension = false;\n        if (notebookShell) {\n            const page = PageConfig.getOption('notebookPage');\n            if (page === 'tree') {\n                mainExtensions = true;\n            }\n            else if (page === 'notebooks') {\n                createExtension = true;\n            }\n        }\n        if (!(labShell || mainExtensions || createExtension)) {\n            return;\n        }\n        const nbgraderMenu = new Menu({ commands: app.commands });\n        nbgraderMenu.id = 'jp-mainmenu-nbgrader';\n        nbgraderMenu.title.label = 'Nbgrader';\n        if (mainExtensions || labShell) {\n            nbgraderMenu.addItem({ command: commandIDs.openAssignmentsList });\n            nbgraderMenu.addItem({ command: commandIDs.openCoursesList });\n            nbgraderMenu.addItem({ command: commandIDs.openFormgrader });\n            nbgraderMenu.addItem({ command: commandIDs.openFormgraderLocal });\n            if (palette) {\n                palette.addItem({\n                    command: commandIDs.openAssignmentsList,\n                    category: 'nbgrader'\n                });\n                palette.addItem({\n                    command: commandIDs.openCoursesList,\n                    category: 'nbgrader'\n                });\n                palette.addItem({\n                    command: commandIDs.openFormgrader,\n                    category: 'nbgrader'\n                });\n                palette.addItem({\n                    command: commandIDs.openFormgraderLocal,\n                    category: 'nbgrader'\n                });\n            }\n        }\n        if (createExtension || labShell) {\n            nbgraderMenu.addItem({ command: commandIDs.openCreateAssignment });\n            if (palette) {\n                palette.addItem({\n                    command: commandIDs.openCreateAssignment,\n                    category: 'nbgrader'\n                });\n            }\n        }\n        mainMenu.addMenu(nbgraderMenu);\n    }\n};\n/**\n * Assignment list plugin.\n */\nconst assignmentListExtension = {\n    id: pluginIDs.assignmentsList,\n    autoStart: true,\n    optional: [ILayoutRestorer, INotebookTree],\n    activate: (app, restorer, notebookTree) => {\n        // Declare a widget variable\n        let widget;\n        // Track the widget state\n        let tracker = new WidgetTracker({\n            namespace: 'nbgrader-assignment-list'\n        });\n        app.commands.addCommand(commandIDs.openAssignmentsList, {\n            label: 'Assignment List',\n            execute: () => {\n                if (!widget || widget.isDisposed) {\n                    const content = new AssignmentListWidget(app);\n                    widget = new MainAreaWidget({ content });\n                    widget.id = 'nbgrader-assignment-list';\n                    widget.addClass('nbgrader-mainarea-widget');\n                    widget.title.label = 'Assignments';\n                    widget.title.closable = true;\n                }\n                if (!tracker.has(widget)) {\n                    // Track the state of the widget for later restoration\n                    tracker.add(widget);\n                }\n                // Attach the widget to the main area if it's not there\n                if (!widget.isAttached) {\n                    if (notebookTree) {\n                        notebookTree.addWidget(widget);\n                        notebookTree.currentWidget = widget;\n                    }\n                    else\n                        app.shell.add(widget, 'main');\n                }\n                widget.content.update();\n                app.shell.activateById(widget.id);\n            }\n        });\n        // Restore the widget state\n        if (restorer != null) {\n            restorer.restore(tracker, {\n                command: commandIDs.openAssignmentsList,\n                name: () => 'nbgrader-assignment-list'\n            });\n        }\n        console.debug('JupyterLab extension assignment-list is activated!');\n    }\n};\n/**\n * Courses list plugin.\n */\nconst courseListExtension = {\n    id: pluginIDs.coursesList,\n    autoStart: true,\n    optional: [ILayoutRestorer, INotebookTree],\n    activate: (app, restorer, notebookTree) => {\n        let widget;\n        // Track the widget state\n        let tracker = new WidgetTracker({\n            namespace: 'nbgrader-course-list'\n        });\n        app.commands.addCommand(commandIDs.openCoursesList, {\n            label: 'Course List',\n            execute: () => {\n                if (!widget || widget.isDisposed) {\n                    const content = new CourseListWidget(app, notebookTree !== null);\n                    widget = new MainAreaWidget({ content });\n                    widget.id = 'nbgrader-course-list';\n                    widget.addClass('nbgrader-mainarea-widget');\n                    widget.title.label = 'Courses';\n                    widget.title.closable = true;\n                }\n                if (!tracker.has(widget)) {\n                    tracker.add(widget);\n                }\n                // Attach the widget to the main area if it's not there\n                if (!widget.isAttached) {\n                    if (notebookTree) {\n                        notebookTree.addWidget(widget);\n                        notebookTree.currentWidget = widget;\n                    }\n                    else\n                        app.shell.add(widget, 'main');\n                }\n                widget.content.update();\n                app.shell.activateById(widget.id);\n            }\n        });\n        // Restore the widget state\n        if (restorer != null) {\n            restorer.restore(tracker, {\n                command: commandIDs.openCoursesList,\n                name: () => 'nbgrader-course-list'\n            });\n        }\n        console.debug('JupyterLab extension course-list is activated!');\n    }\n};\n/**\n * Formgrader extension.\n */\nconst formgraderExtension = {\n    id: pluginIDs.formgrader,\n    autoStart: true,\n    optional: [\n        IDefaultFileBrowser,\n        ILayoutRestorer,\n        INotebookTree,\n        IRouter,\n        ISettingRegistry\n    ],\n    activate: (app, defaultFileBrowser, restorer, notebookTree, router, settings) => {\n        // Declare a widget variable\n        let widget;\n        // Whether formgrader can load the local settings or not\n        let localConfig = false;\n        // Track the widget state\n        let tracker = new WidgetTracker({\n            namespace: 'nbgrader-formgrader'\n        });\n        const openFormgrader = (url) => {\n            if (!widget || widget.isDisposed) {\n                const content = new FormgraderWidget(app, url);\n                widget = new MainAreaWidget({ content });\n                widget.id = 'formgrader';\n                widget.title.label = 'Formgrader';\n                widget.title.closable = true;\n            }\n            if (!tracker.has(widget)) {\n                // Track the state of the widget for later restoration\n                tracker.add(widget);\n            }\n            // Attach the widget to the main area if it's not there\n            if (notebookTree) {\n                if (!widget.isAttached) {\n                    notebookTree.addWidget(widget);\n                }\n                notebookTree.currentWidget = widget;\n            }\n            else if (!widget.isAttached) {\n                app.shell.add(widget, 'main');\n            }\n            widget.content.update();\n            app.shell.activateById(widget.id);\n        };\n        // Command to open formgrader\n        app.commands.addCommand(commandIDs.openFormgrader, {\n            label: 'Formgrader',\n            execute: args => {\n                const settings = ServerConnection.makeSettings();\n                let url = args.url || URLExt.join(settings.baseUrl, 'formgrader');\n                openFormgrader(url);\n            }\n        });\n        // Command to open formgrader using local configuration file\n        app.commands.addCommand(commandIDs.openFormgraderLocal, {\n            label: 'Formgrader (local)',\n            isVisible: () => localConfig,\n            execute: args => {\n                let path = '';\n                if (defaultFileBrowser) {\n                    path = encodeURIComponent(defaultFileBrowser.model.path);\n                }\n                const settings = ServerConnection.makeSettings();\n                let url = args.url || URLExt.join(settings.baseUrl, 'formgrader');\n                if (path) {\n                    url += `?path=${path}`;\n                }\n                openFormgrader(url);\n            }\n        });\n        /**\n         * Load the settings for this extension\n         */\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            localConfig = setting.get('local_config').composite;\n            // Notify the command that the setting has been reloaded\n            app.commands.notifyCommandChanged(commandIDs.openFormgraderLocal);\n        }\n        // Wait for the application to be restored and\n        // for the settings for this plugin to be loaded\n        Promise.all([app.restored, settings.load(pluginIDs.formgrader)])\n            .then(([, setting]) => {\n            // Read the settings\n            loadSetting(setting);\n            // Listen for your plugin setting changes\n            setting.changed.connect(loadSetting);\n        });\n        // Open formgrader from URL.\n        if (router) {\n            const formgraderPattern = /(\\?|&)formgrader=true/;\n            router.register({\n                command: commandIDs.openFormgrader,\n                pattern: formgraderPattern\n            });\n        }\n        // Restore the widget state\n        if (restorer != null) {\n            restorer.restore(tracker, {\n                command: commandIDs.openFormgrader,\n                name: () => 'nbgrader-formgrader'\n            });\n        }\n        console.debug('JupyterLab extension formgrader is activated!');\n    }\n};\n/**\n * Create assignment plugin.\n */\nconst createAssignmentExtension = {\n    id: pluginIDs.createAssignment,\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ILabShell],\n    activate: (app, tracker, labShell) => {\n        const panel = new Panel();\n        panel.node.style.overflowY = 'auto';\n        const createAssignmentWidget = new CreateAssignmentWidget(tracker, labShell);\n        panel.addWidget(createAssignmentWidget);\n        panel.id = 'nbgrader-create_assignemnt';\n        panel.title.label = 'Create Assignment';\n        panel.title.caption = 'Nbgrader Create Assignment';\n        app.shell.add(panel, 'right');\n        app.commands.addCommand(commandIDs.openCreateAssignment, {\n            label: 'Create assignment',\n            isEnabled: () => {\n                return createAssignmentWidget.isAvailable();\n            },\n            execute: () => {\n                app.shell.activateById(panel.id);\n            }\n        });\n        console.debug('Extension \"create_assignment\" activated.');\n    }\n};\n/**\n * Validate assignment plugin.\n */\nconst validateAssignmentExtension = {\n    id: pluginIDs.validateAssignment,\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app) => {\n        app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension());\n        console.debug('JupyterLab extension validate-assignment is activated!');\n    }\n};\nexport default [\n    availableExtensionsManager,\n    formgraderExtension,\n    assignmentListExtension,\n    courseListExtension,\n    createAssignmentExtension,\n    validateAssignmentExtension\n];\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog } from '@jupyterlab/apputils';\nimport { requestAPI } from './validateassignment';\nimport { showNbGraderDialog, validate } from '../common/validate';\nvar nbgrader_version = \"0.9.5\"; // TODO: hardcoded value\nclass ValidateButton extends ToolbarButton {\n    constructor(panel) {\n        super({\n            className: 'validate-button',\n            // iconClass: 'fa fa-fast-forward',\n            label: 'Validate',\n            onClick: () => { this.buttonCallback(); },\n            tooltip: 'Validate Assignment'\n        });\n        this._buttonCallback = this.newButtonCallback();\n        this._versionCheckCallback = this.newVersionCheckCallback();\n        this._saveCallback = this.newSaveCallback();\n        this.panel = panel;\n    }\n    get buttonCallback() {\n        return this._buttonCallback;\n    }\n    get saveCallback() {\n        return this._saveCallback;\n    }\n    get versionCheckCallback() {\n        return this._versionCheckCallback;\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.panel = null;\n        super.dispose();\n    }\n    newSaveCallback() {\n        return (sender, args) => {\n            if (args !== 'completed' && args !== 'failed') {\n                return;\n            }\n            this.panel.context.saveState.disconnect(this.saveCallback);\n            if (args !== \"completed\") {\n                showNbGraderDialog({\n                    title: \"Validation failed\",\n                    body: \"Cannot save notebook\",\n                    buttons: [Dialog.okButton()],\n                    focusNodeSelector: 'input'\n                }, true);\n                this.setButtonLabel();\n                this.setButtonDisabled(false);\n                return;\n            }\n            this.setButtonLabel('Validating...');\n            const notebook_path = this.panel.context.path;\n            requestAPI('assignments/validate', { method: 'POST' }, new Map([['path', notebook_path]])).then(data => {\n                validate(data);\n                this.setButtonLabel();\n                this.setButtonDisabled(false);\n            }).catch(reason => {\n                showNbGraderDialog({\n                    title: \"Validation failed\",\n                    body: `Cannot validate: ${reason}`,\n                    buttons: [Dialog.okButton()],\n                    focusNodeSelector: 'input'\n                }, true);\n                this.setButtonLabel();\n                this.setButtonDisabled(false);\n            });\n        };\n    }\n    newVersionCheckCallback() {\n        return (data) => {\n            if (data.success !== true) {\n                showNbGraderDialog({\n                    title: \"Version Mismatch\",\n                    body: data.message,\n                    buttons: [Dialog.okButton()],\n                    focusNodeSelector: 'input'\n                }, true);\n                return;\n            }\n            this.setButtonDisabled();\n            this.setButtonLabel('Saving...');\n            this.panel.context.saveState.connect(this.saveCallback);\n            this.panel.context.save();\n        };\n    }\n    newButtonCallback() {\n        return () => {\n            requestAPI('nbgrader_version', undefined, new Map([['version', nbgrader_version]])).then(this.versionCheckCallback).catch(reason => {\n                // The validate_assignment server extension appears to be missing\n                showNbGraderDialog({\n                    title: \"Validation failed\",\n                    body: `Cannot check version: ${reason}`,\n                    buttons: [Dialog.okButton()],\n                    focusNodeSelector: 'input'\n                }, true);\n            });\n        };\n    }\n    setButtonDisabled(disabled = true) {\n        const button = this.node.getElementsByTagName('jp-button')[0];\n        if (disabled) {\n            button.setAttribute('disabled', 'disabled');\n        }\n        else {\n            button.removeAttribute('disabled');\n        }\n    }\n    setButtonLabel(label = 'Validate') {\n        const labelElement = this.node.getElementsByClassName('jp-ToolbarButtonComponent-label')[0];\n        labelElement.innerText = label;\n    }\n}\nexport class ButtonExtension {\n    /**\n     * Create a new extension object.\n     */\n    createNew(panel, context) {\n        const button = new ValidateButton(panel);\n        // let children = panel.toolbar.children();\n        let index = 0;\n        for (let widget of panel.toolbar.children()) {\n            if (widget == undefined) {\n                break;\n            }\n            if (widget.node.classList.contains(\"jp-Toolbar-spacer\")) {\n                break;\n            }\n            index++;\n        }\n        panel.toolbar.insertItem(index, 'runAll', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}, params = undefined) {\n    const searchParams = new URLSearchParams();\n    if (params != null) {\n        for (const entry of params.entries()) {\n            searchParams.append(entry[0], entry[1]);\n        }\n    }\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, endPoint) + '?' + searchParams.toString();\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n"],"names":[],"sourceRoot":""}